services:

  jaeger:
    image: jaegertracing/all-in-one:latest
    restart: unless-stopped
    ports:
      - "4317:4317"
      - "6831:6831/udp"
      - "16686:16686"
    networks:
      - kafka_lan

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "9001:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: kafka_examples
      KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS: kafka1:9091,kafka2:9091,kafka3:9091
      KAFKA_CLUSTERS_0_METRICS_PORT: 9997
      KAFKA_CLUSTERS_0_METRICS_TYPE: JMX # JMX or prometheus, default: JMX
      DYNAMIC_CONFIG_ENABLED: 'true'                                          # позволяет изменять конфиг kafka-ui в реальном времени
    networks:
      - kafka_lan
    depends_on:
      - kafka1
      - kafka2
      - kafka3

  kafka1:
    container_name: kafka1
    hostname: kafka1
    image: confluentinc/cp-kafka:latest
    restart: unless-stopped
    ports:
      - "29092:29092"                                                                  # открываем порт для подключения клиентов, извне контейнера
    environment:
      # KAFKA CLUSTER
      KAFKA_NODE_ID: 1                                                                 # Уникальный идентификатор узла в кластере
      CLUSTER_ID: HE5uOlWcSg6jiUydVtaRzQ                                               # Генерируем идентификатор кластера: docker compose exec kafka1 kafka-storage.sh random-uuid
      KAFKA_PROCESS_ROLES: broker,controller                                           # узел может входить в кворум как контроллер и как брокер
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka1:9093,2@kafka2:9093,3@kafka3:9093        # список нод, для кворума (здесь нужно перечислить адреса всех известных контроллеров)
      # LISTENERS
      KAFKA_LISTENERS: INTERNAL://:9091,CONTROLLER://:9093,EXTERNAL://:29092           # публикуем порты на которые брокер будет принимать сообщения
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://:9091,EXTERNAL://127.0.0.1:29092          # публикуем порты для подключения клиентов
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT   # разрешаем доступ без шифрования и авторизации
      # BROKER
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL                                       # название слушателя для брокера, основная цель - репликация разделов
      KAFKA_BROKER_ID: 1
      # CONTROLLER
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER                                      # название слушателя для контроллера
      # CLIENT
      KAFKA_CLIENT_LISTENER_NAME: EXTERNAL                                             # название слушателя для клиента
      # COMMON SETTIGNS
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true                                           # запрещаем автоматическое создание топиков
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9997
      KAFKA_JMX_OPTS: -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=kafka1 -Dcom.sun.management.jmxremote.rmi.port=9997
      KAFKA_LOG_DIRS: '/tmp/kafka-logs'                                                # default: /tmp/kafka-logs
    networks:
      - kafka_lan
    volumes:
      - kafka1data:/kafka/data
    healthcheck:
      # проверка состояния контейнера. проверка происходит по готовности порта 9091
      test: "bash -c 'printf \"\" > /dev/tcp/127.0.0.1/9091; exit $$?;'"
      interval: 5s
      timeout: 10s
      retries: 3
      start_period: 30s

  kafka2:
    container_name: kafka2
    hostname: kafka2
    image: confluentinc/cp-kafka:latest
    restart: unless-stopped
    ports:
      - "29093:29093"                                                                  # открываем порт для подключения клиентов, извне контейнера
    environment:
      # KAFKA CLUSTER
      KAFKA_NODE_ID: 2                                                                 # Уникальный идентификатор узла в кластере
      CLUSTER_ID: HE5uOlWcSg6jiUydVtaRzQ                                               # Генерируем идентификатор кластера: docker compose exec kafka1 kafka-storage.sh random-uuid
      KAFKA_PROCESS_ROLES: broker,controller                                           # узел может входить в кворум как контроллер и как брокер
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka1:9093,2@kafka2:9093,3@kafka3:9093        # список нод, для кворума (здесь нужно перечислить адреса всех известных контроллеров)
      # LISTENERS
      KAFKA_LISTENERS: INTERNAL://:9091,CONTROLLER://:9093,EXTERNAL://:29093           # публикуем порты на которые брокер будет принимать сообщения
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://:9091,EXTERNAL://127.0.0.1:29093          # публикуем порты для подключения клиентов
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT   # разрешаем доступ без шифрования и авторизации
      # BROKER
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL                                       # название слушателя для брокера, основная цель - репликация разделов
      KAFKA_BROKER_ID: 2
      # CONTROLLER
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER                                      # название слушателя для контроллера
      # CLIENT
      KAFKA_CLIENT_LISTENER_NAME: EXTERNAL                                             # название слушателя для клиента
      # COMMON SETTIGNS
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true                                           # запрещаем автоматическое создание топиков
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9997
      KAFKA_JMX_OPTS: -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=kafka2 -Dcom.sun.management.jmxremote.rmi.port=9997
      KAFKA_LOG_DIRS: '/tmp/kafka-logs'
    networks:
      - kafka_lan
    volumes:
      - kafka2data:/kafka/data
    healthcheck:
      # проверка состояния контейнера. проверка происходит по готовности порта 9091
      test: "bash -c 'printf \"\" > /dev/tcp/127.0.0.1/9091; exit $$?;'"
      interval: 5s
      timeout: 10s
      retries: 3
      start_period: 30s

  kafka3:
    container_name: kafka3
    hostname: kafka3
    image: confluentinc/cp-kafka:latest
    restart: unless-stopped
    ports:
      - "29094:29094"                                                                  # открываем порт для подключения клиентов, извне контейнера
    environment:
      # KAFKA CLUSTER
      KAFKA_NODE_ID: 3                                                                 # Уникальный идентификатор узла в кластере
      CLUSTER_ID: HE5uOlWcSg6jiUydVtaRzQ                                               # Генерируем идентификатор кластера: docker compose exec kafka1 kafka-storage.sh random-uuid
      KAFKA_PROCESS_ROLES: broker,controller                                           # узел может входить в кворум как контроллер и как брокер
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka1:9093,2@kafka2:9093,3@kafka3:9093        # список нод, для кворума (здесь нужно перечислить адреса всех известных контроллеров)
      # LISTENERS
      KAFKA_LISTENERS: INTERNAL://:9091,CONTROLLER://:9093,EXTERNAL://:29094           # публикуем порты на которые брокер будет принимать сообщения
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://:9091,EXTERNAL://127.0.0.1:29094          # публикуем порты для подключения клиентов
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT   # разрешаем доступ без шифрования и авторизации
      # BROKER
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL                                       # название слушателя для брокера, основная цель - репликация разделов
      KAFKA_BROKER_ID: 3
      # CONTROLLER
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER                                      # название слушателя для контроллера
      # CLIENT
      KAFKA_CLIENT_LISTENER_NAME: EXTERNAL                                             # название слушателя для клиента
      # COMMON SETTIGNS
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true                                           # запрещаем автоматическое создание топиков
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9997
      KAFKA_JMX_OPTS: -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=kafka3 -Dcom.sun.management.jmxremote.rmi.port=9997
      KAFKA_LOG_DIRS: '/tmp/kafka-logs'
    networks:
      - kafka_lan
    volumes:
      - kafka3data:/kafka/data
    healthcheck:
      # проверка состояния контейнера. проверка происходит по готовности порта 9091
      test: "bash -c 'printf \"\" > /dev/tcp/127.0.0.1/9091; exit $$?;'"
      interval: 5s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  kafka1data:
    driver: local
  kafka2data:
    driver: local
  kafka3data:
    driver: local

networks:
  kafka_lan:
    driver: bridge